generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                @id @default(cuid())
  firstName             String
  lastName              String
  email                 String                @unique
  mobile                String?               @unique
  password              String
  mpin                  String?
  walletBalance         Float                 @default(0)
  profileImage          String?
  dateOfBirth           DateTime?
  gender                String?
  address               String?
  city                  String?
  state                 String?
  country               String?
  zipCode               String?
  isEmailVerified       Boolean               @default(false)
  isMobileVerified      Boolean               @default(false)
  isKycVerified         Boolean               @default(false)
  isActive              Boolean               @default(true)
  isDeleted             Boolean               @default(false)
  isBlocked             Boolean               @default(false)
  blockedReason         String?
  accountType           String                @default("personal")
  referralCode          String?               @unique
  referredBy            String?
  qrCode                String?
  twoFactorEnabled      Boolean               @default(false)
  lastLoginAt           DateTime?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  
  // Relations
  userKyc               UserKyc?
  userDevices           UserDevice[]
  userTokens            UserToken[]
  userBankAccounts      UserBankAccount[]
  userCards             UserCard[]
  sentTransactions      Transaction[]        @relation("SentTransactions")
  receivedTransactions  Transaction[]        @relation("ReceivedTransactions")
  notifications         Notification[]
  activityLogs          ActivityLog[]
  sentPaymentRequests   PaymentRequest[]      @relation("SentPaymentRequests")
  receivedPaymentRequests PaymentRequest[]    @relation("ReceivedPaymentRequests")
  userBlocks            UserBlock[]           @relation("BlockedUser")
  blockedByUsers        UserBlock[]           @relation("BlockedByUser")
  childRelations        ChildParent[]         @relation("ParentUser")
  parentRelations       ChildParent[]         @relation("ChildUser")
  mobileHistory         ChangeMobileHistory[]
  userRoles             UserRole[]
  mediaTempFiles        MediaTemp[]

  @@index([email])
  @@index([mobile])
  @@index([referralCode])
  @@map("users")
}

model UserKyc {
  id              String    @id @default(cuid())
  userId          String    @unique
  documentType    String
  documentNumber  String
  documentFront   String?
  documentBack    String?
  selfie          String?
  status          String    @default("pending") // pending, approved, rejected
  rejectionReason String?
  verifiedAt      DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_kyc")
}

model UserDevice {
  id            String    @id @default(cuid())
  userId        String
  deviceType    String    // ios, android, web
  deviceToken   String?
  deviceId      String
  deviceModel   String?
  appVersion    String?
  osVersion     String?
  lastActive    DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, deviceId])
  @@map("user_devices")
}

model UserToken {
  id            String    @id @default(cuid())
  userId        String
  token         String    @unique @db.Text
  refreshToken  String?   @unique @db.Text
  type          String    // access, refresh, verification, reset
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@map("user_tokens")
}

model UserBankAccount {
  id              String    @id @default(cuid())
  userId          String
  accountName     String
  accountNumber   String
  bankName        String
  bankCode        String?
  routingNumber   String?
  swiftCode       String?
  iban            String?
  isDefault       Boolean   @default(false)
  isVerified      Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_bank_accounts")
}

model UserCard {
  id              String    @id @default(cuid())
  userId          String
  cardType        String    // visa, mastercard, amex, etc
  cardNumber      String
  cardholderName  String
  expiryMonth     Int
  expiryYear      Int
  cvvHash         String?
  isDefault       Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_cards")
}

model Transaction {
  id                String    @id @default(cuid())
  transactionId     String    @unique
  senderId          String?
  receiverId        String?
  type              String    // send, receive, add_money, withdrawal, payment_request
  amount            Float
  currency          String    @default("USD")
  status            String    @default("pending") // pending, processing, completed, failed, cancelled
  paymentMethod     String?   // card, bank, wallet
  description       String?
  metadata          Json?
  failureReason     String?
  processedAt       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  sender            User?     @relation("SentTransactions", fields: [senderId], references: [id])
  receiver          User?     @relation("ReceivedTransactions", fields: [receiverId], references: [id])
  
  @@index([transactionId])
  @@index([senderId])
  @@index([receiverId])
  @@index([status])
  @@map("transactions")
}

model PaymentRequest {
  id              String    @id @default(cuid())
  requesterId     String
  payerId         String
  amount          Float
  currency        String    @default("USD")
  description     String?
  status          String    @default("pending") // pending, approved, rejected, cancelled
  paidAt          DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  requester       User      @relation("SentPaymentRequests", fields: [requesterId], references: [id])
  payer           User      @relation("ReceivedPaymentRequests", fields: [payerId], references: [id])
  
  @@map("payment_requests")
}

model Notification {
  id              String    @id @default(cuid())
  userId          String
  title           String
  message         String    @db.Text
  type            String    // transaction, payment_request, kyc, general
  data            Json?
  isRead          Boolean   @default(false)
  readAt          DateTime?
  createdAt       DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, isRead])
  @@map("notifications")
}

model ActivityLog {
  id              String    @id @default(cuid())
  userId          String
  action          String
  description     String?
  ipAddress       String?
  userAgent       String?
  metadata        Json?
  createdAt       DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@map("activity_logs")
}

model UserBlock {
  id              String    @id @default(cuid())
  blockedUserId   String
  blockedByUserId String
  reason          String?
  createdAt       DateTime  @default(now())
  
  blockedUser     User      @relation("BlockedUser", fields: [blockedUserId], references: [id])
  blockedByUser   User      @relation("BlockedByUser", fields: [blockedByUserId], references: [id])
  
  @@unique([blockedUserId, blockedByUserId])
  @@map("user_blocks")
}

model ChildParent {
  id              String    @id @default(cuid())
  parentId        String
  childId         String
  relationship    String    @default("parent") // parent, guardian
  permissions     Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  parent          User      @relation("ParentUser", fields: [parentId], references: [id])
  child           User      @relation("ChildUser", fields: [childId], references: [id])
  
  @@unique([parentId, childId])
  @@map("child_parents")
}

model ChangeMobileHistory {
  id              String    @id @default(cuid())
  userId          String
  oldMobile       String
  newMobile       String
  reason          String?
  verificationCode String?
  isVerified      Boolean   @default(false)
  verifiedAt      DateTime?
  createdAt       DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("change_mobile_history")
}

model Role {
  id              String    @id @default(cuid())
  name            String    @unique
  displayName     String
  description     String?
  permissions     Json
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  userRoles       UserRole[]
  
  @@map("roles")
}

model UserRole {
  id              String    @id @default(cuid())
  userId          String
  roleId          String
  assignedAt      DateTime  @default(now())
  assignedBy      String?
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  role            Role      @relation(fields: [roleId], references: [id])
  
  @@unique([userId, roleId])
  @@map("user_roles")
}

model Country {
  id              String    @id @default(cuid())
  name            String
  code            String    @unique
  dialCode        String
  currency        String
  currencySymbol  String
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("countries")
}

model KycDocument {
  id              String    @id @default(cuid())
  documentType    String    @unique
  displayName     String
  description     String?
  requiredFields  Json
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("kyc_documents")
}

model Setting {
  id              String    @id @default(cuid())
  key             String    @unique
  value           String    @db.Text
  type            String    @default("string") // string, number, boolean, json
  category        String?
  description     String?
  isEditable      Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("settings")
}

model Cms {
  id              String    @id @default(cuid())
  slug            String    @unique
  title           String
  content         String    @db.Text
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("cms_pages")
}

model Faq {
  id              String    @id @default(cuid())
  question        String    @db.Text
  answer          String    @db.Text
  category        String?
  order           Int       @default(0)
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("faqs")
}

model MediaTemp {
  id              String    @id @default(cuid())
  userId          String?
  filename        String
  originalName    String
  mimetype        String
  size            Int
  path            String
  url             String
  type            String    // image, video, document
  metadata        Json?
  expiresAt       DateTime
  createdAt       DateTime  @default(now())
  
  user            User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("media_temp")
}