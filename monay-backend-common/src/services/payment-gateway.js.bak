const uniqid = require('uniqid');
const Cryptr = require('cryptr');
import config from "../config/index.js";
import utility from './utility.js';
import models from '../models/index.js';
import loggers from './logger.js';
import encryptAPIs from './encrypt.js';
import ApiRequest from "./api-request.js";


const { Transaction, UserCard, UserBankAccount } = models;

const paymentGatewayAPIs = {
	async getUniqueId() {
		try {
			let transactionId = uniqid();
			let isExist = await Transaction.findOne({
				where: { transactionId: transactionId }
			});
			if (!isExist) {
				return transactionId;
			}
			getUniqueId();
		} catch (error) {
			loggers.paymentErrorLogger.error(`UniqueId generate ${error}`);
			throw Error(error);
		}
	},

	async getCrypto() {
		try {
			return new Cryptr(config.app.cryptrSecretKey);
		} catch (error) {
			loggers.paymentErrorLogger.error(`Crypt Error ${error}`);
			throw Error(error);
		}
	},

	// card unique transaction id
	async getCardUniqueId() {
		try {
			let transactionId = `1${utility.generateRandomInteger()}`;
			let isExist = await UserCard.findOne({
				where: { transactionId: transactionId }
			});
			if (!isExist) {
				return transactionId;
			}
			getCardUniqueId();
		} catch (error) {
			loggers.paymentErrorLogger.error(`Random number generate ${error}`);
			throw Error(error);
		}
	},

	// bank account transaction id
	async getBankAccountUniqueId() {
		try {
			let transactionId = `2${utility.generateRandomInteger()}`;
			let isExist = await UserBankAccount.findOne({
				where: { transactionId: transactionId }
			});
			if (!isExist) {
				return transactionId;
			}
			getBankAccountUniqueId();
		} catch (error) {
			loggers.paymentErrorLogger.error(`Bank Random number generate ${error}`);
			throw Error(error);
		}
	},

	async paymentGatewayAuthenticate(currency, method = "card") {
		try {
			return await ApiRequest.getRequest(
				`/gps/api/login/${config.payment[currency][method].merchantId}`,
				config.payment[currency][method], currency,
			);
		} catch (error) {
			loggers.paymentErrorLogger.error(`Payment gate way Authenticate ${error}, currency: ${currency}, method: ${method}`);
			throw error;
		}
	},

	async saveCard(data) {
		try {
			return await this.cardPaymentRequest(config.payment[currency]);
		} catch (error) {
			loggers.paymentErrorLogger.error(`Saved card service ${error}, data: ${utility.jsonStringify(data)}`);
			throw error;
		}
	},

	async directCardPayment(data) {
		try {
			return await this.cardPaymentRequest(config.payment[currency]);
		} catch (error) {
			loggers.paymentErrorLogger.error(`Direct service ${error}, data: ${utility.jsonStringify(data)}`);
			throw error;
		}
	},

	async paymentByCardToken(data) {
		try {
			return await this.cardPaymentRequest(config.payment[currency]);
		} catch (error) {
			loggers.paymentErrorLogger.error(`Payment by card token ${error}, data: ${utility.jsonStringify(data)}`);
			throw error;
		}
	},

	// cardTokenization
	async cardTokenization(req) {
		try {
			const { user: { phoneNumberCountryCode }, body } = req;
			const { payment: { inr, usd } } = config;

			let tokenInfo = null;
			let currency = 'USD';
			let merchantId = usd?.card?.merchantId;
			if (phoneNumberCountryCode === '+1') {
				tokenInfo = await this.paymentGatewayAuthenticate('usd');
			} else {
				currency = 'INR'
				merchantId = inr?.card?.merchantId;
				tokenInfo = await this.paymentGatewayAuthenticate('inr');
			}
			if (tokenInfo && tokenInfo.data.statusCode === '200') {

				let cardNumber = await encryptAPIs.encrypt(req.body.cardNumber);
				let options = {
					headers: { gpsToken: tokenInfo?.data?.gpsApiToken ?? null },
					data: {
						"securityCode": (body.cvv) ? body.cvv : '',
						"merchantId": merchantId,
						"cardNumber": body.cardNumber,
						"expiryYear": body?.year.slice(2) || body?.year,
						"expiryMonth": body?.month,
					}
				};
				const card = await this.cardSaveRequest(options, currency.toLowerCase());
				if (card) {
					loggers.paymentErrorLogger.info(`addMoneyFromCard ${new Date()} ${req.user.id} ${utility.jsonStringify(options)}`);
				} else {
					loggers.paymentErrorLogger.error(`addMoneyFromCard ${req.user.id} ${err}`);
				}
				return card;

			}else{
				loggers.tokenizationErrorLogger.error(`tokenInfo ${req.user.id} ${tokenInfo}`);
				throw new Error(tokenInfo?.data?.statusDesc )
			}
			
		} catch (error) {
			loggers.tokenizationErrorLogger.error(`cardTokenization ${req.user.id} ${error}`);
			throw Error(error);
		}
	},


	async cardPaymentRequest(data, currency) {
		try {
			return await ApiRequest.postRequest(
				`/gps/card/payments`, data, currency
			);
		} catch (error) {
			loggers.paymentErrorLogger.error(`Payment card request ${error}, data: ${utility.jsonStringify(data)}`);
			throw error;
		}
	},

	/**
	 * Card details delete
	 */
	async cardDeleteRequest(data, currency) {
		try {
			return await ApiRequest.deleteRequest(
				`/gps/card/token/delete`, data, currency
			);
		} catch (error) {
			loggers.paymentErrorLogger.error(`Payment card request ${error}, data: ${utility.jsonStringify(data)}`);
			throw error;
		}
	},

	/**
	 * Bank details delete
	 */
	async bankDeleteRequest(data, currency) {
		try {
			return await ApiRequest.deleteRequest(
				`/gps/ach/token/delete`, data, currency
			);
		} catch (error) {
			loggers.paymentErrorLogger.error(`Payment card request ${error}, data: ${utility.jsonStringify(data)}`);
			throw error;
		}
	},


	async cardSaveRequest(data, currency) {
		try {
			return await ApiRequest.postRequest(
				`/gps/card/token/save`, data, currency
			);
		} catch (error) {
			loggers.paymentErrorLogger.error(`Save card request ${error}, data: ${utility.jsonStringify(data)}`);
			throw error;
		}
	},

	async bankSaveRequest(data, currency) {
		try {
			return await ApiRequest.postRequest(
				`/gps/ach/token/save`, data, currency
			);
		} catch (error) {
			loggers.paymentErrorLogger.error(`Save Bank request ${error}, data: ${utility.jsonStringify(data)}`);
			throw error;
		}
	},
	async withdrawMoney(data, currency) {
		try {
			return await ApiRequest.postRequest(
				`/api/v1/wallet/withdraw`, data, currency
			);
		} catch (error) {
			loggers.paymentErrorLogger.error(`Withdraw Money ${error}, data: ${utility.jsonStringify(data)}`);
			throw error;
		}
	},

	async transferMoney(data, currency) {
		try {
			return await ApiRequest.postRequest(
				`/api/v1/wallet/transfer`, data, currency
			);
		} catch (error) {
			loggers.paymentErrorLogger.error(`Transfer Money ${error}, data: ${utility.jsonStringify(data)}`);
			throw error;
		}
	},

	async saveBankAccount(data) {
		try {
			return await this.bankAccountPaymentRequest(config.payment[currency]);
		} catch (error) {
			loggers.paymentErrorLogger.error(`Save Bank account request ${error}, data: ${utility.jsonStringify(data)}`);
			throw error;
		}
	},

	/**
	 * Add money to bank
	 */
	async addMoneyToBank(data, currency) {
		try {
			return await ApiRequest.postRequest(
				`/gps/ach/payments`, data, currency
			);
		} catch (error) {
			loggers.paymentErrorLogger.error(`Save Bank request ${error}, data: ${utility.jsonStringify(data)}`);
			throw error;
		}
	},

	// Deposited money in wallet using card
	async addMoneyFromCard(req) {
		try {
			const { user: { phoneNumberCountryCode, phoneNumber, email, id },
				body: { month, year, cardNumber } } = req;
			const { payment: { inr, usd } } = config;
			let tokenInfo = null;
			let currency = 'USD';
			let merchantId = usd?.card?.merchantId;
			if (phoneNumberCountryCode === '+1') {
				tokenInfo = await this.paymentGatewayAuthenticate('usd');
			} else {
				currency = 'INR';
				merchantId = inr?.card?.merchantId;
				tokenInfo = await this.paymentGatewayAuthenticate('inr');
			}
			if (tokenInfo && tokenInfo.data.statusCode === '200') {
				const { body } = req
				let options = {
					headers: { gpsToken: tokenInfo?.data?.gpsApiToken ?? null },
					data: {
						"amount": body.amount,
						"currency": currency,
						"merchantId": merchantId,
						"clientRequestId": `${utility.generateRandomInteger()}`,
						"channel": "GPS",
						"email": email,
						"phoneNumber": `${phoneNumberCountryCode}${phoneNumber}`,
						"isSavecard": 'N',
						"postalCode": '455277',
						"customerNumber": id ?? '32423'
					}
				};
				if(body?.cnpToken){
					options.data.token = body.cnpToken;
					options.data.requestType = "token";
				}else{
					options.data.cvv = (body.cvv) ? body.cvv : '';
					options.data.cardNumber = cardNumber;
					options.data.expiryYear = year ? year.toString().substr(2) : '';
					options.data.expiryMonth = month;
					options.data.requestType = "card";
				}
				const card = await this.cardPaymentRequest(options, currency.toLowerCase());
				loggers.paymentInfoLogger.info(`addMoneyFromCard ${new Date()} ${req.user.id} ${utility.jsonStringify(card.data)}`);

				if (card) {
					loggers.paymentInfoLogger.info(`addMoneyFromCard ${new Date()} ${req.user.id} ${utility.jsonStringify(body)}`);

				} else {
					loggers.paymentErrorLogger.error(`addMoneyFromCard ${req.user.id} ${err}`);
				}
				return card;
			}else{
				loggers.tokenizationErrorLogger.error(`tokenInfo ${req.user.id} ${tokenInfo}`);
				throw new Error(tokenInfo?.data?.statusDesc)
			}
		} catch (error) {
			loggers.paymentErrorLogger.error(`addMoneyFromCard ${req.user.id} ${error}`);
			throw Error(error);
		}
	},


	async directBankAccountPayment(data) {
		try {
			return await this.bankAccountPaymentRequest(config.payment[currency]);
		} catch (error) {
			loggers.paymentErrorLogger.error(`Direct Bank account payment ${error}, data: ${utility.jsonStringify(data)}`);
			throw error;
		}
	},

	async paymentByBankAccountToken(data) {
		try {
			return await this.cardPaymentRequest(config.payment[currency]);
		} catch (error) {
			loggers.paymentErrorLogger.error(`Payment by Bank account token ${error}, data: ${utility.jsonStringify(data)}`);
			throw error;
		}
	},

	async bankAccountPaymentRequest(data) {
		try {
			return await ApiRequest.postRequest(
				`/gps/ach/payments`,
				config.payment[currency]
			);
		} catch (error) {
			loggers.paymentErrorLogger.error(`Bank account payment request ${error}, data: ${utility.jsonStringify(data)}`);
			throw error;
		}
	},

	//Bank Account Tokenization
	async bankAccountTokenization(req) {
		try {
			const { user: { phoneNumberCountryCode }, body } = req;
			const { payment: { inr, usd } } = config;

			let tokenInfo = null;
			let currency = 'USD';
			let merchantId = usd?.ach?.merchantId;
			if (phoneNumberCountryCode === '+1') {
				tokenInfo = await this.paymentGatewayAuthenticate('usd', 'ach');

			} else {
				merchantId = inr?.ach?.merchantId;
				currency = 'INR';
				tokenInfo = await this.paymentGatewayAuthenticate('inr', 'ach');
			}
			if (tokenInfo && tokenInfo.data.statusCode === '200') {

				let options = {
					headers: { gpsToken: tokenInfo?.data?.gpsApiToken ?? null },
					data: {
						"routingNumber": body.routingNumber,
						"accountNumber": body.accountNumber,
						"accountType": 'S',
						"checkType": 'P',
						"merchantId": merchantId
					}
				};
				const bank = await this.bankSaveRequest(options, currency.toLowerCase());
				if (bank) {
					loggers.paymentErrorLogger.info(`bankAccountTokenization ${req.user.id} ${utility.jsonStringify(bank?.data)}`);
				} else {
					loggers.paymentErrorLogger.error(`bankAccountTokenization ${new Date()} ${req.user.id} ${utility.jsonStringify(body)}`);
				}
				return bank;
			}else{
				loggers.tokenizationErrorLogger.error(`tokenInfo ${req.user.id} ${tokenInfo}`);
				throw new Error(tokenInfo?.data?.statusDesc)
			}
		} catch (error) {
			loggers.tokenizationErrorLogger.error(`bankAccountTokenization ${req.user.id} ${error}`);
			throw Error(error);
		}
	},

	// Transfer money
	async payMoney(req) {
		try {
			const { user: { phoneNumberCountryCode, phoneNumber }, body } = req;
			let tokenInfo = null;
			let currency = 'USD';
			if (phoneNumberCountryCode === '+1') {
				tokenInfo = await this.paymentGatewayAuthenticate('usd');
			} else {
				currency = 'INR';
				tokenInfo = await this.paymentGatewayAuthenticate('inr');
			}
			if (tokenInfo && tokenInfo.data.statusCode === '200') {
				const { amount, cnpToken } = body;
				let options = {
					headers: { gpsToken: tokenInfo?.data?.gpsApiToken ?? null },
					data: {
						"clientRequestId": `${utility.generateRandomInteger()}`,
						"fromCustomerNumber": `${phoneNumberCountryCode}${phoneNumber}`,
						"toCustomerNumber": `${req?.userInfo?.phoneNumberCountryCode}${req?.userInfo?.phoneNumber}`,
						"amount": amount,
						"currency": currency,
						"token": cnpToken ?? null,
					}
				};

				loggers.transferpaymentInfoLogger.info(`payMoney payload ${JSON.stringify(options)}`);
				const transfer = await this.transferMoney(options, currency.toLowerCase());
				if (transfer) {
					loggers.transferpaymentInfoLogger.info(`payMoney ${new Date()} ${req.user.id} ${JSON.stringify(transfer?.data)}`);
				} else {
					loggers.transferpaymentErrorLogger.error(`payMoney ${req.user.id} ${body}`);
				}
				return transfer;
			} else {
				loggers.tokenizationErrorLogger.error(`tokenInfo ${req.user.id} ${tokenInfo}`);
				return tokenInfo
			}
		} catch (error) {
			loggers.transferpaymentErrorLogger.error(`payMoney ${req.user.id} ${error}`);
			throw Error(error);
		}
	},

	// Card and bank token deTokenization
	async cardDeTokenization(req) {
		try {
			const { user: { phoneNumberCountryCode }, body: { token } } = req;
			const { payment: { inr, usd } } = config;

			let tokenInfo = null;
			let merchantId = usd?.card?.merchantId;
			let currency = 'USD';
			if (phoneNumberCountryCode === '+1') {
				tokenInfo = await this.paymentGatewayAuthenticate('usd');
			
			} else {
				merchantId = inr?.card?.merchantId;
				currency = 'INR';
				tokenInfo = await this.paymentGatewayAuthenticate('inr');
			}
			
			if (tokenInfo && tokenInfo?.data?.statusCode === '200') {
				let options = {
					headers: { gpsToken: tokenInfo?.data?.gpsApiToken ?? null },
					data: {
						"merchantId": merchantId,
						"token": token || null
					}
				};

				const card = await this.cardDeleteRequest(options, currency.toLowerCase());
				if (card) {
					loggers.tokenizationErrorLogger.error(`cardDeTokenization ${new Date()} ${req.user.id} ${utility.jsonStringify(card?.data)}`);
				} else {
					loggers.tokenizationErrorLogger.error(`cardDeTokenization ${new Date()} ${req.user.id} ${utility.jsonStringify(body)}`);
				}
				return card;
			}else{
				throw new Error(tokenInfo.data.statusDesc)
			}
			
		} catch (error) {
			loggers.tokenizationErrorLogger.error(`cardDeTokenization ${new Date()} ${req.user.id} error: ${error}`);
			throw Error(error);
		}
	},

	//Bank Account de Tokenization
	async bankAccountDeTokenization(req) {
		try {
			const { user: { phoneNumberCountryCode }, body: { token } } = req;
			const { payment: { inr, usd } } = config;

			let tokenInfo = null;
			let currency = 'USD';
			let merchantId = usd?.ach?.merchantId;
			if (phoneNumberCountryCode === '+1') {
				tokenInfo = await this.paymentGatewayAuthenticate('usd', 'ach');
			} else {
				merchantId = inr?.ach?.merchantId;
				currency = 'INR';
				tokenInfo = await this.paymentGatewayAuthenticate('inr', 'ach');
			}
			if (tokenInfo && tokenInfo.data.statusCode === '200') {

				let options = {
					headers: { gpsToken: tokenInfo?.data?.gpsApiToken ?? null },
					data: {
						"merchantId": merchantId,
						"token": token || null
					}
				};
				const bank = await this.bankDeleteRequest(options, currency.toLowerCase());
				if (bank) {
					loggers.tokenizationInfoLogger.info(`bankAccountDeTokenization ${req.user.id} ${utility.jsonStringify(bank?.data)}`);
				} else {
					loggers.tokenizationErrorLogger.error(`bankAccountDeTokenization ${new Date()} ${req.user.id} ${utility.jsonStringify(body)}`);
				}
				return bank;
			}else{
				loggers.tokenizationErrorLogger.error(`tokenInfo ${req.user.id} ${tokenInfo}`);
				throw new Error(tokenInfo?.data?.statusDesc)
			}
		} catch (error) {
			loggers.tokenizationErrorLogger.error(`bankAccountDeTokenization ${req.user.id} ${error}`);
			throw Error(error);
		}
	},

	// Deposited money in wallet from bank 
	async addMoneyFromBank(req) {
		try {
			const { user: { phoneNumberCountryCode, email, firstName, lastName, phoneNumber, id }, body: { amount } } = req;
			const { payment: { inr, usd } } = config;

			let tokenInfo = null;
			let currency = 'USD';
			let merchantId = usd?.ach?.merchantId;
			if (phoneNumberCountryCode === '+1') {
				tokenInfo = await this.paymentGatewayAuthenticate('usd', 'ach');
			} else {
				merchantId = inr?.ach?.merchantId;
				tokenInfo = await this.paymentGatewayAuthenticate('inr', 'ach');
			}
			if (tokenInfo && tokenInfo.data.statusCode === '200') {
				const { body: { routingNumber, accountNumber } } = req
				let options = {
					headers: { gpsToken: tokenInfo?.data?.gpsApiToken ?? null },
					data: {
						"routingNumber": routingNumber,
						"accountNumber": accountNumber,
						"accountType": 'S',
						"checkType": 'P',
						"merchantId": merchantId,
						"amount": amount,
						"fee": "0.00",
						"channel": "GPS",
						"requestType": "check",
						"isSaveCheck": "N",
						"sessionId": Date(),
						"firstName": firstName,
						"lastName": lastName,
						"addressOne": 'indore',
						"addressTwo": 'indore',
						"city": 'indore',
						"state": 'indore',
						"zip": 'indore',
						"phoneNumber": `${phoneNumberCountryCode}${phoneNumber}`,
						"clientRequestId": `${utility.generateRandomInteger()}`,
						"currency": currency,
						"achType": "ICA",
						"email": email,
						"customerNumber": id
					}
				};
				const bank = await this.addMoneyToBank(options, currency.toLowerCase());
				if (bank) {
					loggers.depositePaymentInfoLogger.info(`Add Money From Bank ${req.user.id} ${utility.jsonStringify(bank?.data)}`);
				} else {
					loggers.depositePaymentErrorLogger.error(`Add Money From Bank ${new Date()} ${req.user.id} ${utility.jsonStringify(body)}`);
				}
				return bank;
			}else{
				loggers.tokenizationErrorLogger.error(`tokenInfo ${req.user.id} ${tokenInfo}`);
				throw new Error(tokenInfo?.data?.statusDesc)
			}
		} catch (error) {
			loggers.depositePaymentErrorLogger.error(`Add Money From Bank ${req.user.id} ${error}`);
			throw Error(error);
		}
	},


	// withdrawal money from wallet to bank
	async transferMoneyToBank(req) {
		try {
			const { user: { phoneNumberCountryCode, phoneNumber, email, firstName, lastName }, body } = req;

			let tokenInfo = null;
			let currency = 'USD';
			if (phoneNumberCountryCode === '+1') {
				tokenInfo = await this.paymentGatewayAuthenticate('usd', 'ach');

			} else {
				currency = 'INR';
				tokenInfo = await this.paymentGatewayAuthenticate('inr', 'ach');
			}
			if (tokenInfo && tokenInfo.data.statusCode === '200') {
				let clientRequestId = `1${utility.generateRandomInteger()}`;
				let options = {
					headers: { gpsToken: tokenInfo?.data?.gpsApiToken ?? null },
					data: {
						"clientRequestId": clientRequestId,
						"fromCustomerNumber": body.routingNumber,
						"accountNumber": body.accountNumber,
						"amount": body.amount,
						"currency": currency,
						"name": `${firstName} ${lastName}`,
						"recepientPhoneNumber": `${phoneNumberCountryCode}${phoneNumber}`,
						"recepientEmail": email
					}
				};
				loggers.withdrawalPaymentInfoLogger.info(`Payload ${options}`);
				const bank = await this.withdrawMoney(options, currency.toLowerCase());
				if (bank) {
					loggers.withdrawalPaymentInfoLogger.info(`bankAccountTokenization ${req.user.id} ${JSON.stringify(bank?.data)}`);
				} else {
					loggers.withdrawalPaymentInfoLogger.error(`bankAccountTokenization ${new Date()} ${req.user.id} ${JSON.stringify(body)}`);
				}
				return bank;
			}else{
				loggers.tokenizationErrorLogger.error(`tokenInfo ${req.user.id} ${tokenInfo}`);
				throw new Error(tokenInfo?.data?.statusDesc)
			}
		} catch (error) {
			loggers.paymentErrorLogger.error(`transferMoneyToBank ${req.user.id} ${error}`);
			throw Error(error);
		}
	},
};
export default paymentGatewayAPIs;
